
# TO mi da≈Ç chat na optymalizacje w symulacji.

"""

# Define the genetic algorithm parameters
POPULATION_SIZE = 50
P_CROSSOVER = 0.9
P_MUTATION = 0.1
MAX_GENERATIONS = 50

# Create the toolbox
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", dict, fitness=creator.FitnessMax)
toolbox = base.Toolbox()

# Register the entities as genes
toolbox.register("entity", random.choice, list(entities.keys()))
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.entity, len(entities))
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# Register the genetic operators
toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", tools.mutUniformInt, low=0, up=len(entities) - 1, indpb=1.0/len(entities))
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("evaluate", evaluate)

# Create the initial population
population = toolbox.population(n=POPULATION_SIZE)

# Run the genetic algorithm
for generation in range(MAX_GENERATIONS):
    # Evaluate the fitness of each individual
    fitnesses = list(map(toolbox.evaluate, population))
    for individual, fitness in zip(population, fitnesses):
        individual.fitness.values = fitness

    # Select the next generation
    offspring = toolbox.select(population, len(population))

    # Apply genetic operators
    offspring = list(map(toolbox.clone, offspring))
    for child1, child2 in zip(offspring[::2], offspring[1::2]):
        if random.random() < P_CROSSOVER:
            toolbox.mate(child1, child2)
            del child1.fitness.values
            del child2.f



"""